package br.com.movieapp.movie_popula_feature_data_di

import br.com.movieapp.movie_popula_feature_data_domain_repository.MoviePopularRepository
import br.com.movieapp.movie_popula_feature_data_domain_source.MoviePopularRemoteDataSource
import br.com.movieapp.movie_popula_feature_data_domain_usecase.GetPopularMoviesUseCase
import br.com.movieapp.movie_popula_feature_data_domain_usecase.GetPopularMoviesUseCaseImpl
import br.com.movieapp.movie_popula_feature_data_repository.MoviePopularRepositoryImpl
import br.com.movieapp.movie_popula_feature_data_source.MoviePopularRemoteDataSourceImpl
import br.com.movieapp.remote.MovieService
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module // Essa anota√ß√£o indica que essa classe √© um m√≥dulo Dagger, que fornece depend√™ncias
@InstallIn(SingletonComponent::class) // Essa anota√ß√£o indica que o m√≥dulo ser√° instalado no componente
// Singleton, o que significa que as depend√™ncias fornecidas por esse m√≥dulo ter√£o um ciclo de vida igual ao da aplica√ß√£o
object MoviePopularFeatureModule {

    @Provides // Essa anota√ß√£o fornece a inst√¢ncia de MoviePopularRemoteDataSourceImpl e depende de um objeto MovieService
    @Singleton // Essa anota√ß√£o indica que a inst√¢ncia de MoviePopularRemoteDataSourceImpl ser√° √∫nica durante o ciclo de vida da aplica√ß√£o
    fun provideMovieDataSource(service: MovieService): MoviePopularRemoteDataSource { // Essa fun√ß√£o fornece a inst√¢ncia de MoviePopularRemoteDataSourceImpl
        return MoviePopularRemoteDataSourceImpl(service = service) // Retorna uma nova inst√¢ncia de MoviePopularRemoteDataSourceImpl
    }

    @Provides
    @Singleton
    fun provideMovieRepository(remoteDataSource: MoviePopularRemoteDataSource): MoviePopularRepository { // Essa fun√ß√£o fornece a inst√¢ncia de MoviePopularRepositoryImpl
        return MoviePopularRepositoryImpl(remoteDataSource = remoteDataSource) // Retorna uma nova inst√¢ncia de MoviePopularRepositoryImpl
    }

    @Provides
    @Singleton
    fun provideGetMoviesPopularUseCase(moviePopularRepository: MoviePopularRepository): GetPopularMoviesUseCase { // Essa fun√ß√£o fornece a inst√¢ncia de GetPopularMoviesUseCaseImpl
        return GetPopularMoviesUseCaseImpl(repository = moviePopularRepository) // Retorna uma nova inst√¢ncia de GetPopularMoviesUseCaseImpl
    }
}
/*
üè≠ A f√°brica (o MoviePopularFeatureModule)

Pensa que essa classe √© uma f√°brica m√°gica que faz tudo o que voc√™ precisa pra trabalhar com filmes populares no seu app. Ela monta as pe√ßas certinhas pra voc√™, pra voc√™ n√£o ter que fazer tudo com a m√£o toda vez!
üß© As pecinhas que a f√°brica monta:

    DataSource (Fonte de dados)

        Como se fosse um entregador que vai at√© a internet buscar os filmes populares.

    MoviePopularRemoteDataSourceImpl(service = service)

    üì¶ Ele usa um servi√ßo chamado MovieService que √© quem fala com a API (o lugar onde est√£o os filmes!).

    Reposit√≥rio (Organizador)

        Esse √© o ajudante que pega o que o entregador trouxe e organiza pra ficar mais f√°cil de usar no app.

    MoviePopularRepositoryImpl(remoteDataSource = remoteDataSource)

    üóÇÔ∏è Ele sabe como guardar, organizar e devolver os filmes do jeito que voc√™ precisa.

    Use Case (Comando)

        Esse √© o bot√£o m√°gico: quando voc√™ aperta, ele fala com o reposit√≥rio pra pegar os filmes!

    GetPopularMoviesUseCaseImpl(repository = moviePopularRepository)

    üí° O bot√£o sabe exatamente o que fazer quando voc√™ quiser buscar os filmes populares.

üßô E o que √© o Dagger Hilt?

Imagina que √© um mago que v√™ tudo o que voc√™ precisa no seu app e fala:

    ‚ÄúAh! Voc√™ precisa de um entregador, um organizador e um bot√£o m√°gico? Deixa que eu crio tudinho pra voc√™, sozinho!‚Äù

Pra isso funcionar, voc√™ s√≥ precisa dizer:

@Inject lateinit var getPopularMoviesUseCase: GetPopularMoviesUseCase

E P√Å! o mago entrega a pe√ßa na sua m√£o, pronta pra usar. ‚ú®


* */