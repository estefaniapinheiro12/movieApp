package br.com.movieapp.paging

import androidx.paging.PagingSource
import androidx.paging.PagingState
import br.com.movieapp.modelDomain.Movie
import br.com.movieapp.movie_popula_feature_data_domain_source.MoviePopularRemoteDataSource
import br.com.movieapp.movie_popula_feature_data_mapper.toMovie
import coil.network.HttpException

class MoviePagingSource( // Essa classe √© respons√°vel por carregar os dados de filmes populares
    private val remoteDataSource: MoviePopularRemoteDataSource // Essa private vari√°vel √© uma inst√¢ncia de MoviePopularRemoteDataSource
) : PagingSource<Int, Movie>() { // Essa classe herda de PagingSource, que √© uma classe do Android Paging Library

    override fun getRefreshKey(state: PagingState<Int, Movie>): Int? {
        return state.anchorPosition?.let { anchorPosition ->// Essa fun√ß√£o retorna a chave de atualiza√ß√£o
        val anchorPage = state.closestPageToPosition(anchorPosition)
        anchorPage?.prevKey?.plus(LIMIT) ?: anchorPage?.nextKey?.minus(LIMIT)
    }
}

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Movie> { // Essa fun√ß√£o carrega os dados de filmes populares
        return try { // Essa fun√ß√£o tenta carregar os dados
            val pageNumber = params.key ?: 1 // Se a chave for nula, define como 1
            val moviePaging = remoteDataSource.getPopularMovies(page = pageNumber) // Chama a fun√ß√£o getPopularMovies do remoteDataSource
            val movies = moviePaging.movies // Pega a lista de filmes da resposta
            val totalPages = moviePaging.totalPages

            LoadResult.Page( // Cria uma inst√¢ncia de LoadResult.Page, que √© uma classe que representa uma p√°gina de dados
                data = movies, // Converte a lista de filmes para o modelo Movie
                prevKey = if (pageNumber == 1) null else pageNumber - 1, // Se a p√°gina for 1, a chave anterior √© nula, caso contr√°rio, √© a p√°gina atual - 1
                nextKey = if (pageNumber == totalPages) null else pageNumber + 1 // Se a lista de filmes estiver vazia, a chave seguinte √© nula, caso contr√°rio, √© a p√°gina atual + 1
            )
        } catch (exception: Exception) { // Essa fun√ß√£o captura qualquer exce√ß√£o que ocorra durante o carregamento dos dados
             LoadResult.Error(exception) // Retorna um LoadResult.Error com a exce√ß√£o
        }
    }
    companion object { // Essa classe cont√©m constantes e fun√ß√µes auxiliares
        private const val LIMIT = 20 // N√∫mero m√°ximo de itens por p√°gina
    }

}

/*
üì¶ O que essa classe faz?

Essa classe √© quem vai buscar os filmes populares pedacinho por pedacinho, ou melhor, p√°gina por
 p√°gina, como se fosse uma biblioteca com v√°rias prateleiras de filmes. Ela √© quem vai l√° e pega os
 filmes certos cada vez que o app pede.
üßí Explicando como se fosse uma crian√ßa curiosa:

Imagina que o app quer mostrar os filmes famosos...
Mas n√£o d√° pra pegar todos de uma vez, n√©? Seria pesado demais! üß±
Ent√£o ele faz assim:

‚ÄúMe d√° s√≥ 20 de cada vez, por favor?‚Äù

E essa classe MoviePagingSource responde:

‚ÄúBeleza, vou l√° buscar!‚Äù

üé¨ Como funciona passo a passo:

O app diz:

‚ÄúQuero a p√°gina 1 de filmes!‚Äù

Essa classe pergunta pra remoteDataSource:

‚ÄúMe d√° os filmes da p√°gina 1!‚Äù

O remoteDataSource traz os filmes (20, por exemplo).

A MoviePagingSource organiza:

Data = os filmes que vieram

prevKey = qual √© a p√°gina anterior (se for a primeira, n√£o tem)

nextKey = qual √© a pr√≥xima p√°gina (se n√£o vier mais nada, acabou)

Se der algum erro no caminho:

‚ÄúOpa! Deu erro! üò¢‚Äù E ela avisa o app direitinho.

üß© E os peda√ßos do c√≥digo?

PagingSource<Int, Movie> = Essa classe faz parte do sistema de pagina√ß√£o. O primeiro Int √© o n√∫mero
da p√°gina, e o Movie √© o que ela vai buscar.

load(...) = √© como ela vai l√° buscar os dados da p√°gina.

params.key ?: 1 = se ningu√©m disser qual p√°gina, ela come√ßa pela p√°gina 1.

movies.toMovie() = ela converte os dados brutos pra algo que o app entende (tipo traduzir pra linguagem do app).

prevKey e nextKey = ajudam o app a saber se tem mais antes ou depois.

LoadResult.Error(...) = se algo deu errado, ela avisa certinho com o erro.

üîÅ E o getRefreshKey()?

Ele serve pra dizer:

‚ÄúSe o usu√°rio puxar pra atualizar, por onde recome√ßamos?‚Äù
Mas ainda t√° com um TODO, ent√£o voc√™ vai implementar depois! üòâ

üìå Resumo como se fosse um desenho:

App: ‚ÄúMe d√° uma p√°gina de filmes?‚Äù

MoviePagingSource: ‚ÄúClaro! Espera que vou buscar.‚Äù

Vai no remoteDataSource, pega os filmes da p√°gina.

Volta e fala: ‚ÄúToma, aqui est√£o os filmes da p√°gina X!‚Äù

Se der erro, ela avisa com carinho.*/
