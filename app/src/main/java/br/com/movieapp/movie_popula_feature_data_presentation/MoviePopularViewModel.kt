package br.com.movieapp.movie_popula_feature_data_presentation

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.paging.PagingConfig
import androidx.paging.cachedIn
import br.com.movieapp.movie_popula_feature_data_domain_usecase.GetPopularMoviesUseCase
import br.com.movieapp.movie_popula_feature_data_presentation.state.MoviePopularState
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject

@HiltViewModel
class MoviePopularViewModel @Inject constructor( // inje√ß√£o de depend√™ncia do ViewModel
    getPopularMoviesUseCase: GetPopularMoviesUseCase // inje√ß√£o de depend√™ncia do caso de uso
): ViewModel() { // ViewModel √© uma classe do Android que armazena e gerencia dados relacionados √† interface do usu√°rio
    var uiState by mutableStateOf(MoviePopularState()) // uiState √© uma vari√°vel que armazena o estado da interface do usu√°rio
        private set // set privado para que n√£o possa ser alterado fora do ViewModel

    init { // bloco de inicializa√ß√£o do ViewModel
        val movies = getPopularMoviesUseCase.invoke(
            GetPopularMoviesUseCase.Params( // par√¢metros necess√°rios para o caso de uso
                pagingConfig = pagingConfig() // configura√ß√£o de pagina√ß√£o definida no estado da interface do usu√°rio
            )
        ) // chama o caso de uso para obter os filmes populares
            .cachedIn(viewModelScope) // armazenamento em cache dos dados obtidos
        uiState = uiState.copy(movies = movies) // copia o estado atual da interface do usu√°rio e atualiza a lista de filmes
    }
    private fun pagingConfig(): PagingConfig {
        return PagingConfig(
            pageSize = 20,
            initialLoadSize = 20
        )
    }

}

/*
üß† O que √© essa classe MoviePopularViewModel?

Ela √© como o ‚Äúc√©rebro da tela de filmes populares‚Äù.
√â quem busca os dados, guarda o que foi buscado e avisa a tela quando algo novo acontecer.
Vamos quebrar por partes como se fosse uma historinha:
üçø 1. class MoviePopularViewModel(...) : ViewModel()

    A classe ViewModel √© tipo um chefe de mem√≥ria que n√£o se perde quando voc√™ gira o celular ou fecha e volta pra tela.

    Ela cuida da l√≥gica e protege os dados da interface.

üíâ 2. @HiltViewModel e @Inject constructor(...)

    Essas anota√ß√µes servem pra dizer:

    ‚ÄúHilt, me ajuda a construir essa classe! Voc√™ j√° sabe onde pegar o que eu preciso!‚Äù

    No caso, ele precisa do GetPopularMoviesUseCase, que √© quem sabe como buscar os filmes populares.

üì¶ 3. var uiState by mutableStateOf(MoviePopularState())

    uiState √© onde guardamos o estado da tela.

    mutableStateOf √© tipo um ba√∫ m√°gico: sempre que algo mudar nele, a tela se atualiza sozinha!

    private set quer dizer: "s√≥ o ViewModel pode mudar esse ba√∫".

üöÄ 4. init { ... } ‚Üí Bloco de inicializa√ß√£o

Quando essa classe √© criada, ela automaticamente faz o seguinte:

val movies = getPopularMoviesUseCase.invoke()

    Isso chama o caso de uso, que vai buscar os filmes l√° na internet ou banco de dados.

.cachedIn(viewModelScope)

    Isso diz: ‚ÄúGuarda os resultados em cache enquanto o ViewModel existir, pra n√£o ficar buscando tudo de novo toda hora.‚Äù

üéÅ 5. uiState = uiState.copy(movies = movies)

    Aqui ele atualiza o uiState dizendo:

    ‚ÄúEi tela, agora temos filmes! Pode mostrar!‚Äù

Como a tela est√° observando esse estado, ela se atualiza automaticamente.
üë∂ Explicando pra uma crian√ßa:

    ‚ÄúEssa classe √© como um entregador de pipoca üçø.
    Ele vai buscar os filmes que est√£o fazendo sucesso, guarda direitinho em uma caixa (o uiState) e fala pra tela:

    ‚Äî Olha, chegou filme novo! Mostra a√≠ pros espectadores!‚Äù
* */