package br.com.movieapp.paging

import androidx.paging.PagingSource
import androidx.paging.PagingState
import br.com.movieapp.modelDomain.Movie
import br.com.movieapp.movie_detail_feature.domain.source.MovieDetailsRemoteDataSource
import br.com.movieapp.movie_popula_feature_data_mapper.toMovie
import coil.network.HttpException

class MovieSimiliarPagingSource( // classe para carregar os filmes similares
    private val remoteDataSource: MovieDetailsRemoteDataSource, // fonte de dados remota
    private val movieId: Int // id do filme
): PagingSource<Int, Movie> (){ // heran√ßa da classe PagingSource com os tipos Int e Movie
    override fun getRefreshKey(state: PagingState<Int, Movie>): Int? { // fun√ß√£o para obter a chave de atualiza√ß√£o
        return state.anchorPosition?.let { anchorPosition -> // verifica se a posi√ß√£o √¢ncora n√£o √© nula
            val anchorPage = state.closestPageToPosition(anchorPosition) // obt√©m a p√°gina mais pr√≥xima da posi√ß√£o √¢ncora
            anchorPage?.prevKey?.plus(LIMIT) ?: anchorPage?.nextKey?.minus(LIMIT) // retorna a chave anterior ou pr√≥xima da p√°gina √¢ncora

        }
    }

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Movie> { // fun√ß√£o para carregar os dados
        return try { // tenta executar o bloco de c√≥digo
            val pageNumber = params.key ?: 1 // obt√©m o n√∫mero da p√°gina ou define como 1 se for nulo
            val response = remoteDataSource // chama a fonte de dados remota
                .getMoviesSimilar(page = pageNumber, movieId = movieId) // obt√©m os filmes similares
            val movies = response.movies    // obt√©m os resultados dos filmes
            val totalPages = response.totalPages


            LoadResult.Page ( // cria uma nova p√°gina de resultados
                data = movies, // converte os resultados dos filmes para o tipo Movie
                prevKey = if (pageNumber == 1) null else pageNumber - 1, // define a chave anterior como nula se o n√∫mero da p√°gina for 1, caso contr√°rio, subtrai 1
                nextKey = if (pageNumber == totalPages) null else pageNumber + 1 // define a chave pr√≥xima como nula se a lista de filmes estiver vazia, caso contr√°rio, adiciona 1
            )
        } catch (exception: Exception) { // captura qualquer exce√ß√£o
            LoadResult.Error(exception)
        }
    }
    companion object{ // objeto companheiro para definir constantes
        private const val LIMIT = 20 // limite de resultados por p√°gina
    }

}
/*
O que est√° acontecendo aqui?

Essa classe MovieSimiliarPagingSource tem um papel importante no seu app: ela √© respons√°vel por
carregar os filmes similares aos poucos (de forma paginada), √† medida que o usu√°rio vai rolando a tela.

Imagina que voc√™ est√° vendo uma lista de filmes, e o app vai mostrando mais filmes conforme voc√™
vai descendo. Esse comportamento de carregar mais filmes conforme a necessidade √© o que a classe faz aqui.

Vamos explicar por partes:
1. Heran√ßa da PagingSource:

A classe MovieSimiliarPagingSource herda de uma classe chamada PagingSource. Isso significa que ela
vai se comportar como uma "fonte de dados" que vai carregar as informa√ß√µes em p√°ginas.
Ela vai trabalhar com dois tipos de dados:

    Int (para o n√∫mero da p√°gina).

    Movie (para os filmes que voc√™ vai mostrar).

Ela tem que seguir um padr√£o de como carregar esses filmes e de como lidar com as p√°ginas.

2. Construtor da Classe:

O construtor da classe recebe dois par√¢metros:

    remoteDataSource: Esse √© o lugar de onde ela vai pegar as informa√ß√µes. Aqui, ela est√° recebendo
    a interface MovieDetailsRemoteDataSource (que j√° vimos antes). Esse objeto vai ser usado para
     pedir √† API os filmes semelhantes.

    movieId: O ID do filme. Isso √© necess√°rio porque queremos pegar filmes similares ao filme de ID
     que foi passado.

     3. Fun√ß√£o getRefreshKey:

Essa fun√ß√£o serve para obter a chave de atualiza√ß√£o quando o usu√°rio tenta voltar ou atualizar a lista.

    Quando a pessoa rola a lista para cima ou para baixo, a fun√ß√£o usa a posi√ß√£o √¢ncora (onde a tela
    estava no momento) e tenta descobrir qual √© a p√°gina mais pr√≥xima daquela posi√ß√£o.

    Ela vai usar a chave anterior ou pr√≥xima da p√°gina para carregar a nova lista.

4. Fun√ß√£o load:

A fun√ß√£o mais importante! üòé

Essa fun√ß√£o √© a que vai carregar os filmes. Ela √© chamada quando o usu√°rio come√ßa a rolar a tela e
precisa ver mais filmes.

Aqui est√° o que ela faz:

    N√∫mero da P√°gina: Ela pega o n√∫mero da p√°gina a partir do par√¢metro params.key (ou come√ßa com a
    p√°gina 1 se n√£o houver valor).

    Chama a API: Com o remoteDataSource, ela chama a fun√ß√£o getMoviesSimilar passando o movieId e o
     n√∫mero da p√°gina. Isso vai trazer os filmes semelhantes.

    Cria√ß√£o da P√°gina de Resultados: Depois de receber os filmes, ela cria um novo objeto
    LoadResult.Page, que vai conter:

        data: Uma lista de filmes convertidos para o modelo Movie usando a fun√ß√£o toMovie().

        prevKey: A chave da p√°gina anterior. Se a p√°gina for a 1, n√£o tem p√°gina anterior (nula).

        nextKey: A chave da pr√≥xima p√°gina. Se a lista de filmes estiver vazia, n√£o existe pr√≥xima
        p√°gina.

Tudo isso √© feito dentro de um bloco try-catch para garantir que se houver um erro, ele ser√° tratado
e n√£o vai travar o app.

5. O que √© o companion object e o LIMIT?

Dentro da classe, existe um companion object, que √© como se fosse uma "parte est√°tica" da classe onde
voc√™ pode guardar constantes que n√£o mudam.

    O LIMIT √© o n√∫mero m√°ximo de filmes por p√°gina. Aqui, √© definido como 20. Isso significa que cada
     vez que voc√™ pedir filmes similares, vai receber at√© 20 filmes por vez.

Resumo do que a classe faz:

    A classe MovieSimiliarPagingSource √© uma fonte de dados paginada para buscar filmes semelhantes.

    Ela vai carregar filmes aos poucos, conforme o usu√°rio rola a tela para baixo.

    Quando o usu√°rio quer ver mais filmes, ela vai:

        Chamar a API para pegar os filmes semelhantes.

        Converter esses filmes para o formato Movie.

        Mostrar os resultados de forma paginada, com a chave para as p√°ginas anteriores e seguintes.

    E ela vai garantir que tudo aconte√ßa de forma suave, tratando poss√≠veis erros que podem acontecer
    na comunica√ß√£o com a internet.

Por que tudo isso √© importante?

Essa classe permite que o app mostre filmes similares aos poucos, sem sobrecarregar a mem√≥ria do
dispositivo e sem travar o app. Quando o usu√°rio chega no final da lista, ele pode continuar vendo
mais filmes sem perceber o carregamento acontecendo.

* */