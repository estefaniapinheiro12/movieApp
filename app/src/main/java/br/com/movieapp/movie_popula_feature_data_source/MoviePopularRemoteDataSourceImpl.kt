package br.com.movieapp.movie_popula_feature_data_source

import br.com.movieapp.modelDomain.MoviePaging
import br.com.movieapp.movie_popula_feature_data_domain_source.MoviePopularRemoteDataSource
import br.com.movieapp.movie_popula_feature_data_mapper.toMovie
import br.com.movieapp.paging.MoviePagingSource
import br.com.movieapp.remote.MovieService
import javax.inject.Inject

class MoviePopularRemoteDataSourceImpl @Inject constructor( // essa classe serve para implementar a interface
    private val service: MovieService // a classe MovieService √© uma interface que define os m√©todos de rede
): MoviePopularRemoteDataSource { // a classe MoviePopularRemoteDataSourceImpl implementa a interface MoviePopularRemoteDataSource

    override fun getPopularMoviesPagingSource(): MoviePagingSource { // essa fun√ß√£o retorna um objeto do tipo MoviePagingSource
        return MoviePagingSource(this) // retorna um objeto do tipo MoviePagingSource, passando a si mesmo como par√¢metro
    }

    override suspend fun getPopularMovies(page: Int): MoviePaging { // essa fun√ß√£o retorna um objeto do tipo MovieResponse
        val response = service.getPopularMovies(page)
        return MoviePaging(
            page = response.page,
            totalPages = response.totalPages,
            totalResults = response.totalResults,
            movies = response.movieResults.map { it.toMovie() // converte a resposta da API para o modelo de dom√≠nio
            }
        )
    }
}

/*
üì¶ O que essa classe faz?

Imagina que o app quer buscar filmes famosos na internet.
Essa classe aqui √© como um mensageiro do app, que sabe falar com a internet pra pegar essas informa√ß√µes.
üßí Explicando como se fosse uma historinha:

O app quer saber:

‚ÄúEi, internet, quais s√£o os filmes populares?‚Äù

Mas o app n√£o sabe falar com a internet direto.
Ent√£o ele pede ajuda pra essa classe: MoviePopularRemoteDataSourceImpl.

Essa classe vai at√© um lugar chamado MovieService (que √© quem realmente fala com a internet) e pergunta:

‚ÄúMe d√° os filmes da p√°gina n√∫mero X?‚Äù

Depois, ela devolve a resposta pro app num pacotinho chamado MovieResponse.

üö™ Essa classe tem duas portas (fun√ß√µes):

getPopularMoviesPagingSource()
üëâ Cria um pegador de filmes p√°gina por p√°gina (tipo uma colherzinha que pega um pedacinho de sopa por vez).
Ela devolve um MoviePagingSource, que √© quem vai puxar os filmes da internet aos pouquinhos.

getPopularMovies(page: Int)
üëâ Vai at√© a internet e diz:

‚ÄúMe d√° os filmes da p√°gina 1 (ou 2, ou 3...)‚Äù
Usa o MovieService pra isso.

üß† Em resumo bem simples:

Essa classe:

√â o tradutor e mensageiro do app. Ela sabe como falar com a internet pra buscar os filmes populares,
e tamb√©m ajuda a montar as p√°ginas com os filmes, uma de cada vez.*/
