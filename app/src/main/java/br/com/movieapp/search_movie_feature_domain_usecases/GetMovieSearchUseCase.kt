package br.com.movieapp.search_movie_feature_domain_usecases

import androidx.paging.Pager
import androidx.paging.PagingConfig
import androidx.paging.PagingData
import br.com.movieapp.modelDomain.MovieSearch
import br.com.movieapp.search_movie_feature_domain_repository.MovieSearchRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.emptyFlow
import javax.inject.Inject

interface GetMovieSearchUseCase { // interface para o caso de uso de busca de filmes
    operator fun invoke(params: Params): Flow<PagingData<MovieSearch>> // m√©todo para buscar filmes, que recebe os par√¢metros e retorna um fluxo de dados paginados
    data class Params(
        val query: String,
        val pagingConfig: PagingConfig
    ) // classe interna que representa os par√¢metros de busca, que cont√©m a string de busca
}


class GetMovieSearchUseCaseImpl @Inject constructor( //
    private val repository: MovieSearchRepository // injetando o reposit√≥rio de busca de filmes
) : GetMovieSearchUseCase { // implementando a interface GetMovieSearchUseCase
    override fun invoke(params: GetMovieSearchUseCase.Params): Flow<PagingData<MovieSearch>> { // implementando
        // o m√©todo invoke, onde params √© a string de busca, Flow √© um tipo de fluxo que emite dados
        //  de forma ass√≠ncrona, pagingData √© um tipo de dado que representa uma lista de dados paginados, MovieSearch √© o tipo de dado que representa um filme
        return try {
            val pagingSource = repository.getSearchMovies(params.query)

            return Pager(
                config = params.pagingConfig,
                pagingSourceFactory = {
                    pagingSource
                }
            ).flow
        } catch (e: Exception) {
            emptyFlow()
        }

    }
}

/*
üåü T√≠tulo da hist√≥ria: "A Busca pelos Filmes Perdidos"

Era uma vez, no mundo m√°gico dos aplicativos de filmes, um ajudante muito esperto chamado
GetMovieSearchUseCaseImpl. Ele era conhecido como o resolvedor de buscas! Toda vez que algu√©m dizia:

    "Quero ver filmes sobre drag√µes!" üêâ

Esse ajudante sabia exatamente o que fazer.
üì© O Pedido Especial

Mas ele nunca fazia isso sozinho. Ele recebia um bilhetinho m√°gico chamado Params, que dizia:

    "Aqui est√° a palavrinha que a pessoa quer procurar: 'drag√µes'"

Esse bilhetinho vinha dentro de uma interface m√°gica chamada GetMovieSearchUseCase, que dizia:

    "Toda vez que algu√©m te chamar, voc√™ precisa olhar esse bilhetinho e trazer uma lista de filmes."

üßô‚Äç‚ôÇÔ∏è O Reposit√≥rio, o S√°bio dos Filmes

O ajudante ent√£o corria at√© um s√°bio muito s√°bio chamado MovieSearchRepository. Esse s√°bio sabia
como procurar os filmes, mas precisava que algu√©m o chamasse com as palavras certas.

Ent√£o o ajudante dizia:

    "√ì grande reposit√≥rio, aqui est√° o pedido: queremos filmes de drag√µes, mas entregue 20 por vez, tudo bem?"

O s√°bio respondia:

    "Pode deixar! Eu vou entregar essa lista aos poucos, como um rio que vai trazendo um balde de cada vez." ‚õ≤

Esse rio de dados era chamado de Flow<PagingData<MovieSearch>>, que quer dizer:

    "Uma lista m√°gica de filmes que vai chegando devagarinho, p√°gina por p√°gina."

üì¶ Como funciona a entrega?

O ajudante tamb√©m dizia:

    "Quero que venham 20 filmes agora, e depois mais 20, e depois mais 20‚Ä¶ at√© terminar!" üß∫üß∫üß∫

Ele fazia isso usando um pacote chamado PagingConfig, que dizia:

    pageSize = 20: ‚ÄúMande 20 filmes por vez.‚Äù

    initialLoadSize = 20: ‚ÄúComece com 20 tamb√©m.‚Äù

üßö E assim termina a hist√≥ria‚Ä¶

Toda vez que algu√©m procurava um filme, o ajudante GetMovieSearchUseCaseImpl pegava o bilhetinho,
chamava o s√°bio reposit√≥rio e trazia a lista m√°gica de filmes, devagarinho, para a pessoa ver no celular üì±‚ú®

E todos viveram felizes assistindo seus filmes favoritos! üé¨üíñ
* */